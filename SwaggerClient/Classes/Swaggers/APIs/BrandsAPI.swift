//
// BrandsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class BrandsAPI {
    /**

     - parameter brandId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func brandAddToFavoritePut(brandId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        brandAddToFavoritePutWithRequestBuilder(brandId: brandId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /brand/add-to-favorite

     - OAuth:
       - type: oauth2
       - name: oAuth2
     - parameter brandId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func brandAddToFavoritePutWithRequestBuilder(brandId: Int) -> RequestBuilder<Void> {
        let path = "/brand/add-to-favorite"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brand_id": brandId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter placement
     */
    public enum Placement_brandListGet: String { 
        case home = "home"
        case favorite = "favorite"
    }

    /**

     - parameter placement: (query)  (optional, default to home)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func brandListGet(placement: Placement_brandListGet? = nil, completion: @escaping ((_ data: [InlineResponse200]?,_ error: Error?) -> Void)) {
        brandListGetWithRequestBuilder(placement: placement).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /brand/list

     - OAuth:
       - type: oauth2
       - name: oAuth2
     - examples: [{contentType=application/json, example=[ {
  "impression" : {
    "id" : "d926d7bb9ccf46fc04a61bd65d87b9b3",
    "position" : 1
  },
  "brand" : {
    "image" : "http://fleengs.com/assets/8ff39b94/images/logo-header.png",
    "login_url" : "http://fleengs.com?form=req&id=48",
    "is_favorite" : true,
    "notification_badge" : {
      "content" : "new"
    },
    "highlighted" : true,
    "name" : "Fling",
    "logo" : "http://fleengs.com/assets/8ff39b94/images/logo-header.png",
    "id" : 12
  }
}, {
  "impression" : {
    "id" : "d926d7bb9ccf46fc04a61bd65d87b9b3",
    "position" : 1
  },
  "brand" : {
    "image" : "http://fleengs.com/assets/8ff39b94/images/logo-header.png",
    "login_url" : "http://fleengs.com?form=req&id=48",
    "is_favorite" : true,
    "notification_badge" : {
      "content" : "new"
    },
    "highlighted" : true,
    "name" : "Fling",
    "logo" : "http://fleengs.com/assets/8ff39b94/images/logo-header.png",
    "id" : 12
  }
} ]}]
     - parameter placement: (query)  (optional, default to home)

     - returns: RequestBuilder<[InlineResponse200]> 
     */
    open class func brandListGetWithRequestBuilder(placement: Placement_brandListGet? = nil) -> RequestBuilder<[InlineResponse200]> {
        let path = "/brand/list"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "placement": placement?.rawValue
        ])

        let requestBuilder: RequestBuilder<[InlineResponse200]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter brandId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func brandRemoveFromFavoriteDelete(brandId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        brandRemoveFromFavoriteDeleteWithRequestBuilder(brandId: brandId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /brand/remove-from-favorite

     - OAuth:
       - type: oauth2
       - name: oAuth2
     - parameter brandId: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func brandRemoveFromFavoriteDeleteWithRequestBuilder(brandId: Int) -> RequestBuilder<Void> {
        let path = "/brand/remove-from-favorite"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "brand_id": brandId.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
