//
// DeviceAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DeviceAPI {
    /**
     Get an existing device by ID

     - parameter deviceId: (query) Unique device ID (genereted on server side) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deviceGet(deviceId: UUID, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        deviceGetWithRequestBuilder(deviceId: deviceId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an existing device by ID
     - GET /device
     - 

     - examples: [{contentType=application/json, example={
  "settings" : {
    "back_url" : "back_url"
  },
  "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "client_secret" : "JoRYJSDD87cXkirb",
  "trackingData" : {
    "deviceDetails" : {
      "os" : "iOS",
      "os_version" : "12.3 beta",
      "model" : "iPhone12",
      "brand" : "Apple"
    },
    "country" : "USA",
    "idfa" : "idfa-xxx-xxxx-xxx",
    "language" : "en-US",
    "location" : {
      "latitude" : 51.6,
      "longitude" : -36.6
    },
    "kochava_device_id" : "kochava-xxx-device-xxx",
    "onesingal_player_id" : "onesingal-xxx-player-xxx"
  }
}}]
     - parameter deviceId: (query) Unique device ID (genereted on server side) 

     - returns: RequestBuilder<Device> 
     */
    open class func deviceGetWithRequestBuilder(deviceId: UUID) -> RequestBuilder<Device> {
        let path = "/device"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "device_id": deviceId
        ])

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Register new client device on server

     - parameter appId: (query) Application id 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicePost(appId: String, body: Device? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        devicePostWithRequestBuilder(appId: appId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Register new client device on server
     - POST /device
     - 

     - examples: [{contentType=application/json, example={
  "settings" : {
    "back_url" : "back_url"
  },
  "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "client_secret" : "JoRYJSDD87cXkirb",
  "trackingData" : {
    "deviceDetails" : {
      "os" : "iOS",
      "os_version" : "12.3 beta",
      "model" : "iPhone12",
      "brand" : "Apple"
    },
    "country" : "USA",
    "idfa" : "idfa-xxx-xxxx-xxx",
    "language" : "en-US",
    "location" : {
      "latitude" : 51.6,
      "longitude" : -36.6
    },
    "kochava_device_id" : "kochava-xxx-device-xxx",
    "onesingal_player_id" : "onesingal-xxx-player-xxx"
  }
}}]
     - parameter appId: (query) Application id 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func devicePostWithRequestBuilder(appId: String, body: Device? = nil) -> RequestBuilder<Device> {
        let path = "/device"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "app_id": appId
        ])

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update device data

     - parameter deviceId: (query) Unique device ID (genereted on server side) 
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func devicePut(deviceId: UUID, body: Device? = nil, completion: @escaping ((_ data: Device?,_ error: Error?) -> Void)) {
        devicePutWithRequestBuilder(deviceId: deviceId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update device data
     - PUT /device
     - 

     - examples: [{contentType=application/json, example={
  "settings" : {
    "back_url" : "back_url"
  },
  "id" : "3fa85f64-5717-4562-b3fc-2c963f66afa6",
  "client_secret" : "JoRYJSDD87cXkirb",
  "trackingData" : {
    "deviceDetails" : {
      "os" : "iOS",
      "os_version" : "12.3 beta",
      "model" : "iPhone12",
      "brand" : "Apple"
    },
    "country" : "USA",
    "idfa" : "idfa-xxx-xxxx-xxx",
    "language" : "en-US",
    "location" : {
      "latitude" : 51.6,
      "longitude" : -36.6
    },
    "kochava_device_id" : "kochava-xxx-device-xxx",
    "onesingal_player_id" : "onesingal-xxx-player-xxx"
  }
}}]
     - parameter deviceId: (query) Unique device ID (genereted on server side) 
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Device> 
     */
    open class func devicePutWithRequestBuilder(deviceId: UUID, body: Device? = nil) -> RequestBuilder<Device> {
        let path = "/device"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "device_id": deviceId
        ])

        let requestBuilder: RequestBuilder<Device>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
